import java.io.File
import org.apache.spark.rdd.RDD
import org.apache.spark.mllib.linalg.DenseVector
import org.apache.spark.mllib.regression.LabeledPoint
import org.apache.spark.mllib.classification.{LogisticRegressionModel, LogisticRegressionWithLBFGS}
import org.apache.spark.mllib.evaluation.MulticlassMetrics


// import org.apache.spark.mllib.util.MLUtil.
val path = "D:\\ScalaSpace\\data\\financialCardMatch\\matchData"
val trainFile = path + "\\train1.csv"
val trianRate = Array(0.8,0.2)
val rst = new Array[(String,Double)](4)
rst(0) = "LRacc : " -> 0d
rst(1) = "DTacc : " -> 0d
rst(2) = "RFacc : " -> 0d
rst(3) = "GBDTacc : " -> 0d

def isNum( _c : Char ) : Boolean = _c >= '0' && _c <= '9'


  def csvFile(_path : String, _rateZero : Int = 1) : RDD[LabeledPoint] = {
    val rawData = scala.io.Source.fromFile(trainFile)("utf-8").getLines.drop(1).toArray
    val data = sc.parallelize(rawData).flatMap{
      line =>
        val splits = line.split(',')
        val label = splits.last.toDouble.toInt
        val features = new DenseVector(splits.init.map(_.toDouble))
        label match {
          case 0 => Array.fill[LabeledPoint](_rateZero)(new LabeledPoint(label,features))
          case 1 => Array.fill[LabeledPoint](1)(new LabeledPoint(label,features))
          case _ => Array.fill(0)(new LabeledPoint(label,features))
        }
    }  
    data
  }
  def convertNum(_str : String) : Double = {
    val rst = _str.head match {
      case '-' => "-0" + _str.tail 
      case '.' => "0" + _str
      case _ => _str
    }
    rst.toDouble
  }

val data = csvFile(trainFile)

import org.apache.spark.mllib.tree.GradientBoostedTrees
import org.apache.spark.mllib.tree.configuration.BoostingStrategy
import org.apache.spark.mllib.tree.model.GradientBoostedTreesModel

val splits = data.randomSplit(trianRate)
val (trainingData, testData) = (splits(0), splits(1))

// Train a GradientBoostedTrees model.
// The defaultParams for Classification use LogLoss by default.
val boostingStrategy = BoostingStrategy.defaultParams("Classification")
boostingStrategy.numIterations = 3 // Note: Use more iterations in practice.
boostingStrategy.treeStrategy.numClasses = 2
boostingStrategy.treeStrategy.maxDepth = 5
// Empty categoricalFeaturesInfo indicates all features are continuous.
boostingStrategy.treeStrategy.categoricalFeaturesInfo = Map[Int, Int]()

val model = GradientBoostedTrees.train(trainingData, boostingStrategy)

// Evaluate model on test instances and compute test error
val labelAndPreds = testData.map { point =>
  val prediction = model.predict(point.features)
  (point.label, prediction)
}
rst(3) = "GBDTacc" -> labelAndPreds.filter(r => r._1 == r._2).count.toDouble / testData.count()



rst.mkString("\n")


import org.apache.spark.mllib.tree.model.DecisionTreeModel

class TreeModelMeta(var trees: Array[DecisionTreeModel], var treeWeights: Array[Double])  extends Serializable {
  var version:String = "1.0";
  var loadedClassName:String = "";
  var storageType:String = "JSON"; //JSON, XML

  var algo:String = "Classification"; //Classification, Regression
  var treeAlgo:String = "Regression";
  var combiningStrategy:String = "Sum"; //Vote, Average, Sum

  var nClasses:Int = 2
  var nFeatures:Int = 0
  var nTrees:Int = 0
  var nLeaves:Int = 0
  var nNodes:Int = 0

  var impurity:String = "Gini";
  var maxDepth:Int = 10;
  var maxBins:Int = 10;

  var treesXmlString:String = "";

  //case class Metadata(
  //   algo: String,
  //  treeAlgo: String,
  //  combiningStrategy: String,
  //  treeWeights: Array[Double])

  override def toString():String={
      val sb=new StringBuilder()
      sb.append("##class=" + this.loadedClassName + "\n")
      sb.append("##version=" + this.version + "\n")
      sb.append("\n")
      sb.append("##algo=" + this.algo + "\n")
      sb.append("##treeAlgo=" + this.treeAlgo + "\n")
      sb.append("##combiningStrategy=" + this.combiningStrategy + "\n")
      sb.append("##treeWeights=" + this.treeWeights.mkString(",") + "\n")
      sb.append("\n")
      sb.append("##nClasses=" + this.nClasses + "\n")
      sb.append("##nFeatures=" + this.nFeatures + "\n")
      sb.append("##nTrees=" + this.nTrees + "\n")
      sb.append("##nLeaves=" + this.nLeaves + "\n")
      sb.append("##nNodes=" + this.nNodes + "\n")
      sb.toString()
      
  }
  def toJsonString():String={
      val sb=new StringBuilder()
      sb.append("algo "+this.algo+"\n")
      sb.append("nClasses "+this.nClasses+"\n")
      sb.append("\n")
      sb.append("nFeatures "+this.nFeatures+"\n")
      sb.append("w\n")
      sb.toString()
  }
  def toMetaString():String={
      val sb=new StringBuilder()
      sb.append("##MART\n")
      sb.append("\n")
      sb.append("##class=" + this.loadedClassName + "\n")
      sb.append("##version=" + this.version + "\n")
      sb.append("\n")
      sb.append("##algo=" + this.algo + "\n")
      sb.append("##treeAlgo=" + this.treeAlgo + "\n")
      sb.append("##combiningStrategy=" + this.combiningStrategy + "\n")
      sb.append("##treeWeights=" + this.treeWeights.mkString(",")  + "\n")
      sb.append("\n")
      sb.append("##nClasses=" + this.nClasses + "\n")
      sb.append("##nFeatures=" + this.nFeatures + "\n")
      sb.append("##nTrees=" + this.nTrees + "\n")
      sb.append("##nLeaves=" + this.nLeaves + "\n")
      sb.append("##nNodes=" + this.nNodes + "\n")
      sb.append("\n")
      sb.toString()
  }
  def toTreesString():String={
      val sb=new StringBuilder()
      sb.append("\n")
      sb.toString()
  }

  def updateMetaString(lines:String):Unit = {
      lines.split("\n").foreach(content => {
          System.out.println("content: " + content)
          val keyValue: Array[String] = content.split("=")
          if (keyValue.length == 2) {
              if (keyValue.apply(0).trim.indexOf("##class") == 0) {
                  loadedClassName = keyValue.apply(1).trim
              } else if (keyValue.apply(0).trim.indexOf("##version") == 0) {
                  version = keyValue.apply(1).trim
              } else if (keyValue.apply(0).trim.indexOf("##algo") == 0) {
                  algo = keyValue.apply(1).trim
              } else if (keyValue.apply(0).trim.indexOf("##treeAlgo") == 0) {
                  treeAlgo = keyValue.apply(1).trim
              } else if (keyValue.apply(0).trim.indexOf("##combiningStrategy") == 0) {
                  combiningStrategy = keyValue.apply(1).trim
              } else if (keyValue.apply(0).trim.indexOf("##treeWeights") == 0) {
                  treeWeights = keyValue.apply(1).trim.split(",").map(_.toDouble)
              } else if (keyValue.apply(0).trim.indexOf("##nClasses") == 0) {
                  nClasses = keyValue.apply(1).trim.toInt
              } else if (keyValue.apply(0).trim.indexOf("##nFeatures") == 0) {
                  nFeatures = keyValue.apply(1).trim.toInt
              } else if (keyValue.apply(0).trim.indexOf("##nTrees") == 0) {
                  nTrees = keyValue.apply(1).trim.toInt
              } else if (keyValue.apply(0).trim.indexOf("##nLeaves") == 0) {
                  nLeaves = keyValue.apply(1).trim.toInt
              } else if (keyValue.apply(0).trim.indexOf("##nNodes") == 0) {
                  nNodes = keyValue.apply(1).trim.toInt
              }
          }
      })
  }
}

object TreeModelMeta {

  def fromMetaString(content:String, meta:TreeModelMeta):Unit = {
      val keyValue:Array[String] = content.split("=")
      if (keyValue.length == 2) {
          if (keyValue.apply(0).trim.indexOf("##class") == 0) {
              meta.loadedClassName = keyValue.apply(1).trim
          } else if (keyValue.apply(0).trim.indexOf("##version") == 0) {
              meta.version = keyValue.apply(1).trim
          } else if (keyValue.apply(0).trim.indexOf("##algo") == 0) {
              meta.algo = keyValue.apply(1).trim
          } else if (keyValue.apply(0).trim.indexOf("##treeAlgo") == 0) {
              meta.treeAlgo = keyValue.apply(1).trim
          } else if (keyValue.apply(0).trim.indexOf("##combiningStrategy") == 0) {
              meta.combiningStrategy = keyValue.apply(1).trim
          } else if (keyValue.apply(0).trim.indexOf("##treeWeights") == 0) {
              meta.treeWeights = keyValue.apply(1).trim.asInstanceOf[Array[Double]]
          } else if (keyValue.apply(0).trim.indexOf("##nClasses") == 0) {
              meta.nClasses = keyValue.apply(1).trim.toInt
          } else if (keyValue.apply(0).trim.indexOf("##nFeatures") == 0) {
              meta.nFeatures = keyValue.apply(1).trim.toInt
          } else if (keyValue.apply(0).trim.indexOf("##nTrees") == 0) {
              meta.nTrees = keyValue.apply(1).trim.toInt
          } else if (keyValue.apply(0).trim.indexOf("##nLeaves") == 0) {
              meta.nLeaves = keyValue.apply(1).trim.toInt
          }
      }
  }

  def getTreeAlgoFromMetaString(lines:String):String = {
      var tmpTreeAlgo = "Regression"
      lines.split("\n").foreach(content => {
          val keyValue: Array[String] = content.split("=")
          if (keyValue.length == 2) {
              if (keyValue.apply(0).trim.indexOf("##treeAlgo") == 0) {
                  tmpTreeAlgo = keyValue.apply(1).trim
              }
          }
      })
      tmpTreeAlgo
  }

}


import java.io._

// import com.weibo.datasys.weispark.tree.{RegressionTree, Ensemble}
import org.apache.hadoop.fs.{FSDataInputStream, Path}
import org.apache.spark.util.Utils
import org.apache.spark.SparkContext
import org.apache.spark.mllib.classification.LogisticRegressionModel
import org.apache.spark.mllib.linalg.Vectors
import org.apache.spark.mllib.regression.GeneralizedLinearModel
import org.apache.spark.mllib.tree.configuration.Algo
import org.apache.spark.mllib.tree.configuration.Algo
import org.apache.spark.mllib.tree.configuration.Algo.Algo
import org.apache.spark.mllib.tree.model._
import org.apache.spark.mllib.util.Loader
import org.apache.spark.rdd.RDD
import org.apache.spark.sql.SQLContext
import org.json4s._
import org.json4s.JsonDSL._
import org.json4s.jackson.JsonMethods._

import scala.collection.mutable
import scala.io.Source

object TreeModelUtil {
  /**
   * save the model to local file system
   */
  def saveRandomForestTreeModelToFile(sc: SparkContext, model: RandomForestModel, path: String) {
      // method 1:
      //model.save(sc, path)

      // method 2:
      import java.io._
      val outWriter = new BufferedWriter(new FileWriter(new File(path)))

      val meta = saveRandomForestModelToMeta(model)

      outWriter.append(meta.toMetaString())
      outWriter.append("\n");
      outWriter.append(meta.treesXmlString)

      outWriter.close()
  }

  def saveRandomForestModelToMeta(model: RandomForestModel):TreeModelMeta = {
      val meta = new TreeModelMeta(model.trees, Array.fill(model.trees.length)(1.0))

      meta.version = "1.0"
      meta.loadedClassName = "org.apache.spark.mllib.tree.model.RandomForestModel"

      meta.algo = model.algo.toString //"Classification"
      meta.treeAlgo = model.trees(0).algo.toString
      //meta.combiningStrategy = model.combiningStrategy.toString
      meta.combiningStrategy = if (model.algo == Algo.Classification) "Vote" else "Average"

      meta.nTrees = model.numTrees
      meta.nNodes = model.totalNumNodes

      //meta.treesXmlString = treesXmlStringFromDecisionTreeModelArray(meta.trees)
      //meta.treesXmlString = treesJsonStringFromDecisionTreeModelArray(meta.trees)
      var (treesXmlString, leavesNum) = treesJsonStringFromDecisionTreeModelArray(meta.trees, 0)
      meta.treesXmlString = treesXmlString
      meta.nLeaves = leavesNum

      meta
  }

  def saveDecisionTreeModelToFile(sc: SparkContext, model: DecisionTreeModel, path: String) {
      // method 1:
      //model.save(sc, path)

      // method 2:
      import java.io._
      val outWriter = new BufferedWriter(new FileWriter(new File(path)))

      val meta = saveDecisionTreeModelToMeta(model)

      outWriter.append(meta.toMetaString())
      outWriter.append("\n");
      outWriter.append(meta.treesXmlString)

      outWriter.close()
  }

  def saveDecisionTreeModelToMeta(model: DecisionTreeModel):TreeModelMeta = {
      val trees:Array[DecisionTreeModel] = Array.fill(1)(model)
      val meta = new TreeModelMeta(trees, Array.fill(trees.length)(1.0))

      meta.version = "1.0"
      meta.loadedClassName = "org.apache.spark.mllib.tree.DecisionTreeModel"

      meta.algo = model.algo.toString //"Classification"
      meta.nNodes = model.numNodes
      meta.maxDepth = model.depth

      //meta.treesXmlString = treesXmlStringFromDecisionTreeModelArray(meta.trees)
      //meta.treesXmlString = treesJsonStringFromDecisionTreeModelArray(meta.trees)
      var (treesXmlString, leavesNum) = treesJsonStringFromDecisionTreeModelArray(meta.trees, 0)
      meta.treesXmlString = treesXmlString
      meta.nLeaves = leavesNum

      meta
  }

  def saveGradientBoostedTreesModelToFile(sc: SparkContext, model: GradientBoostedTreesModel, path: String, firstNodeId:Int): Unit ={
      // method 1:
      //model.save(sc, path)

      // method 2:
      import java.io._
      val outWriter = new BufferedWriter(new FileWriter(new File(path)))

      val meta = saveGradientBoostedTreesModelToMeta(model, firstNodeId)

      outWriter.append(meta.toMetaString())
      outWriter.append("\n");
      outWriter.append(meta.treesXmlString)

      outWriter.close()
  }

  def saveGradientBoostedTreesModelToMeta(model: GradientBoostedTreesModel, firstNodeId:Int):TreeModelMeta = {
      val meta = new TreeModelMeta(model.trees, model.treeWeights)

      meta.version = "1.0"
      meta.loadedClassName = "org.apache.spark.mllib.tree.model.GradientBoostedTreesModel"

      meta.algo = model.algo.toString //"Classification"
      meta.treeAlgo = model.trees(0).algo.toString //"Regression"
      //meta.combiningStrategy = "Sum"
      meta.nTrees = model.numTrees
      meta.nNodes = model.totalNumNodes

      //meta.treesXmlString = treesXmlStringFromDecisionTreeModelArray(meta.trees)
      var (treesXmlString, leavesNum) = treesJsonStringFromDecisionTreeModelArray(meta.trees, firstNodeId)
      meta.treesXmlString = treesXmlString
      meta.nLeaves = leavesNum

      meta.storageType = "JSON"
      //meta.storageType = "XML"

      meta
  }

  def treesJsonStringFromDecisionTreeModelArray (treesArray:Array[DecisionTreeModel], nodeId:Int) : (String, Int) = {
      var treesJsonString: String = ""
      var newNodeId = nodeId
      var i = 0
      for (tree <- treesArray) {
          val (tmpTreesJsonString, tmpLeavesNum ) = treesJsonStringFromDecisionTreeNode(i, tree.topNode, newNodeId)
          treesJsonString += tmpTreesJsonString
          newNodeId = tmpLeavesNum // incr all
          //treesJsonString += "\n"
          i += 1
      }
      //System.out.println("nodeId: " + nodeId + ", newNodeId: " + newNodeId)
      (treesJsonString, newNodeId)
  }

  case class SplitData(
      feature: Int,
      threshold: Double,
      featureType: Int,
      categories: Seq[Double]) //{
    // def toSplit: Split = {
    //   new Split(feature, threshold, FeatureType(featureType), categories.toList)
    // }
  // }

  object SplitData {
    def apply(s: Split): SplitData = {
      SplitData(s.feature, s.threshold, s.featureType.id, s.categories)
    }

    // def apply(r: Row): SplitData = {
    //   SplitData(r.getInt(0), r.getDouble(1), r.getInt(2), r.getAs[Seq[Double]](3))
    // }
  }

  def splitToSplitData(data: Option[Split]): Option[SplitData] = data match {
    case Some(s) => Option(new SplitData(s.feature, s.threshold, s.featureType.id, s.categories))
    case None => None
  }

  def treesJsonStringFromDecisionTreeNode (treeId:Int, node:Node, nodeId:Int) : (String, Int) = {
      var treesJsonString: String = ""
      var newNodeId = nodeId
      implicit val formats = DefaultFormats

      newNodeId += 1

      var jsonStr: JsonAST.JObject = ("treeId" -> treeId) ~
        ("nodeId" -> node.id) ~
        ("predict.predict" -> node.predict.predict) ~
        ("predict.prob" -> node.predict.prob) ~
        ("predict" -> Extraction.decompose(node.predict)) ~
        ("impurity" -> node.impurity) ~
        ("isLeaf" -> node.isLeaf) ~
        ("golbalId" -> newNodeId) ~
        ("split" -> Extraction.decompose(node.split)) ~
        // ("split" -> Extraction.decompose(splitToSplitData(node.split).toArray)) ~
        ("leftNodeId" -> (if(node.leftNode.isEmpty) {-1} else {node.leftNode.get.id})) ~
        ("rightNodeId" -> (if(node.rightNode.isEmpty) {-1} else {node.rightNode.get.id})) ~
        ("infoGain" -> (if(node.stats.isEmpty) {0} else {node.stats.get.gain}))
        ("stats" -> Extraction.decompose(node.stats))
      treesJsonString += compact(render(jsonStr))
      treesJsonString += "\n"

      if (node.leftNode.isDefined && !node.leftNode.isEmpty) {
          val (tmpTreesJsonString, tmpNodeId) = treesJsonStringFromDecisionTreeNode(treeId, node.leftNode.get, newNodeId)
          treesJsonString += tmpTreesJsonString
          newNodeId = tmpNodeId
          //treesJsonString += "\n"
      }

      if (node.rightNode.isDefined && !node.rightNode.isEmpty) {
          val (tmpTreesJsonString, tmpNodeId) = treesJsonStringFromDecisionTreeNode(treeId, node.rightNode.get, newNodeId)
          treesJsonString += tmpTreesJsonString
          newNodeId = tmpNodeId
          //treesJsonString += "\n"
      }

      (treesJsonString, newNodeId)
  }
}

val rstPath = """D:\Docs\Works_And_Jobs\Sina\Betn_code\ModelExport\GBDT\rst\"""
val ofp = (rstPath + "gbdt-" + 
  new java.text.SimpleDateFormat("yyyy-MM-dd-HH").
  format(System.currentTimeMillis) + ".model")
TreeModelUtil.saveGradientBoostedTreesModelToFile(sc,model,ofp,1)
println("""TreeModelUtil.saveGradientBoostedTreesModelToFile(sc,model,ofp,1)""")


